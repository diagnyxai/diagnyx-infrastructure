# Cost Anomaly Detection
# Cost: FREE
# Purpose: Automatically detect unusual spending patterns

# Cost anomaly monitor
resource "aws_ce_anomaly_monitor" "main" {
  name              = "diagnyx-${var.environment}-anomaly-monitor"
  monitor_type      = "DIMENSIONAL"
  monitor_dimension = "SERVICE"

  tags = merge(
    local.common_tags,
    {
      Name = "diagnyx-${var.environment}-anomaly-monitor"
    }
  )
}

# Custom anomaly monitor for high-cost services
resource "aws_ce_anomaly_monitor" "high_cost_services" {
  count = var.environment == "production" ? 1 : 0

  name         = "diagnyx-high-cost-services-monitor"
  monitor_type = "CUSTOM"

  monitor_specification = jsonencode({
    Dimensions = {
      Key          = "LINKED_ACCOUNT"
      Values       = [data.aws_caller_identity.current.account_id]
      MatchOptions = ["EQUALS"]
    }
    And = [
      {
        Dimensions = {
          Key = "SERVICE"
          Values = [
            "Amazon Elastic Compute Cloud - Compute",
            "Amazon Relational Database Service",
            "Amazon OpenSearch Service"
          ]
          MatchOptions = ["EQUALS"]
        }
      }
    ]
  })

  tags = merge(
    local.common_tags,
    {
      Name = "diagnyx-high-cost-services-monitor"
    }
  )
}

# Anomaly subscription for email alerts
resource "aws_ce_anomaly_subscription" "main" {
  name      = "diagnyx-${var.environment}-anomaly-subscription"
  frequency = "DAILY"

  monitor_arn_list = concat(
    [aws_ce_anomaly_monitor.main.arn],
    var.environment == "production" ? [aws_ce_anomaly_monitor.high_cost_services[0].arn] : []
  )

  subscriber {
    type    = "EMAIL"
    address = var.budget_alert_email
  }

  threshold_expression {
    dimension {
      key           = "ANOMALY_TOTAL_IMPACT_ABSOLUTE"
      values        = ["20.0"]  # Alert on anomalies > $20
      match_options = ["GREATER_THAN_OR_EQUAL"]
    }
  }

  tags = merge(
    local.common_tags,
    {
      Name = "diagnyx-${var.environment}-anomaly-subscription"
    }
  )
}

# SNS topic for cost anomaly alerts (for integration with other systems)
resource "aws_sns_topic" "cost_anomalies" {
  name = "diagnyx-${var.environment}-cost-anomalies"

  tags = merge(
    local.common_tags,
    {
      Name = "Cost Anomaly Alerts"
    }
  )
}

resource "aws_sns_topic_subscription" "cost_anomaly_email" {
  topic_arn = aws_sns_topic.cost_anomalies.arn
  protocol  = "email"
  endpoint  = var.budget_alert_email
}

# Lambda function to process cost anomalies (placeholder for custom logic)
resource "aws_iam_role" "cost_anomaly_processor" {
  name = "diagnyx-${var.environment}-cost-anomaly-processor"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "cost_anomaly_processor_basic" {
  role       = aws_iam_role.cost_anomaly_processor.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Outputs
output "anomaly_monitor_arn" {
  value       = aws_ce_anomaly_monitor.main.arn
  description = "ARN of the cost anomaly monitor"
}

output "anomaly_subscription_arn" {
  value       = aws_ce_anomaly_subscription.main.arn
  description = "ARN of the anomaly subscription"
}

output "cost_anomaly_topic_arn" {
  value       = aws_sns_topic.cost_anomalies.arn
  description = "ARN of the cost anomaly SNS topic"
}