name: diagnyx-services

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: diagnyx-postgres
    environment:
      POSTGRES_USER: diagnyx
      POSTGRES_PASSWORD: diagnyx123
      POSTGRES_DB: diagnyx
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/init-databases.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - diagnyx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diagnyx"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # User Service (Java/Spring Boot)
  user-service:
    build:
      context: ../../user-service
      dockerfile: Dockerfile
    container_name: diagnyx-user-service
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USER: diagnyx
      DB_PASSWORD: diagnyx123
      JWT_SECRET: your-256-bit-secret-key-for-jwt-signing
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - diagnyx-network
    restart: unless-stopped

  # API Gateway (Node.js/Express)
  diagnyx-api-gateway:
    build:
      context: ../../diagnyx-api-gateway
      dockerfile: Dockerfile
    container_name: diagnyx-api-gateway
    ports:
      - "8443:8443"
    environment:
      PORT: 8443
      NODE_ENV: production
      USER_SERVICE_URL: http://user-service:8080
      JWT_SECRET: your-256-bit-secret-key-for-jwt-signing
      HTTPS_ENABLED: "true"
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      - user-service
    networks:
      - diagnyx-network
    restart: unless-stopped

  # UI Service (Next.js/React)
  diagnyx-ui:
    build:
      context: ../../diagnyx-ui
      dockerfile: Dockerfile
    container_name: diagnyx-ui
    ports:
      - "3002:3000"
    environment:
      PORT: 3000
      NEXT_PUBLIC_API_URL: https://localhost:8443
      NEXT_PUBLIC_SITE_URL: http://localhost:3002
    depends_on:
      - diagnyx-api-gateway
    networks:
      - diagnyx-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: diagnyx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - diagnyx-network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: diagnyx-grafana
    ports:
      - "3005:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - diagnyx-network
    restart: unless-stopped

networks:
  diagnyx-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

# Note: This is the simplified Diagnyx architecture with 6 services
# Removed services: observability-service, ai-quality-service, optimization-service, 
# dashboard-service, Redis, Kafka, Zookeeper, ClickHouse