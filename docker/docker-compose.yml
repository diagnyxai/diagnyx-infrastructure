version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: diagnyx-postgres
    environment:
      POSTGRES_DB: diagnyx
      POSTGRES_USER: diagnyx
      POSTGRES_PASSWORD: diagnyx123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - diagnyx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diagnyx"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: diagnyx-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - diagnyx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: diagnyx-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - diagnyx-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: diagnyx-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - diagnyx-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: diagnyx-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - diagnyx-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ../../diagnyx-auth
      dockerfile: Dockerfile
    container_name: diagnyx-auth
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      NODE_ENV: development
      DATABASE_URL: postgres://diagnyx:diagnyx123@postgres:5432/diagnyx_auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret
      JWT_REFRESH_SECRET: dev-refresh-secret
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - diagnyx-network

  # Ingestion Service
  ingestion-service:
    build:
      context: ../../diagnyx-ingestion
      dockerfile: Dockerfile
    container_name: diagnyx-ingestion
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      ENVIRONMENT: development
      DATABASE_URL: postgres://diagnyx:diagnyx123@postgres:5432/diagnyx_traces
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC: llm-traces
      OTLP_ENDPOINT: otel-collector:4317
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - diagnyx-network

  # Dashboard
  dashboard:
    build:
      context: ../../diagnyx-dashboard
      dockerfile: Dockerfile
    container_name: diagnyx-dashboard
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_ENVIRONMENT: development
    depends_on:
      - auth-service
      - ingestion-service
    networks:
      - diagnyx-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: diagnyx-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - diagnyx-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: diagnyx-grafana
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - diagnyx-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: diagnyx-otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    networks:
      - diagnyx-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  kafka_data:

networks:
  diagnyx-network:
    driver: bridge