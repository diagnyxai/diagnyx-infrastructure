name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-services:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: user-service
            type: java
            path: repositories/user-service
            test_command: "mvn test"
            coverage_command: "mvn test jacoco:report"
          - name: api-gateway
            type: node
            path: repositories/api-gateway
            test_command: "npm test"
            coverage_command: "npm run test:coverage"
          - name: diagnyx-ui
            type: node
            path: repositories/diagnyx-ui
            test_command: "npm test"
            coverage_command: "npm run test:coverage"
          - name: diagnyx-python-sdk
            type: python
            path: repositories/diagnyx-python-sdk
            test_command: "python -m pytest"
            coverage_command: "python -m pytest --cov=diagnyx --cov-report=xml tests/"
          - name: diagnyx-javascript-sdk
            type: node
            path: repositories/diagnyx-javascript-sdk
            test_command: "npm test"
            coverage_command: "npm run test:coverage"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Java setup for Maven services
    - name: Set up JDK 17
      if: matrix.service.type == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    # Go setup
    - name: Set up Go
      if: matrix.service.type == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: ${{ matrix.service.path }}/go.sum
    
    # Node.js setup
    - name: Set up Node.js
      if: matrix.service.type == 'node'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service.path }}/package-lock.json
    
    # Python setup
    - name: Set up Python
      if: matrix.service.type == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ${{ matrix.service.path }}/requirements.txt
    
    # Install dependencies
    - name: Install Java dependencies
      if: matrix.service.type == 'java'
      working-directory: ${{ matrix.service.path }}
      run: mvn dependency:resolve
    
    - name: Install Go dependencies
      if: matrix.service.type == 'go'
      working-directory: ${{ matrix.service.path }}
      run: go mod download
    
    - name: Install Node.js dependencies
      if: matrix.service.type == 'node'
      working-directory: ${{ matrix.service.path }}
      run: npm ci
    
    - name: Install Python dependencies
      if: matrix.service.type == 'python'
      working-directory: ${{ matrix.service.path }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Run tests
    - name: Run tests for ${{ matrix.service.name }}
      working-directory: ${{ matrix.service.path }}
      run: ${{ matrix.service.test_command }}
    
    # Upload test results
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.service.name }}
        path: |
          ${{ matrix.service.path }}/target/surefire-reports/
          ${{ matrix.service.path }}/coverage/
          ${{ matrix.service.path }}/htmlcov/
          ${{ matrix.service.path }}/coverage.out

  lint-and-quality:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: user-service
            type: java
            path: repositories/user-service
            lint_command: "mvn checkstyle:check"
          - name: api-gateway
            type: node
            path: repositories/api-gateway
            lint_command: "npm run lint && npm run type-check"
          - name: diagnyx-ui
            type: node
            path: repositories/diagnyx-ui
            lint_command: "npm run lint && npx tsc --noEmit"
          - name: diagnyx-javascript-sdk
            type: node
            path: repositories/diagnyx-javascript-sdk
            lint_command: "npm run lint && npx tsc --noEmit"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Same setup steps as test job
    - name: Set up JDK 17
      if: matrix.service.type == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Set up Go
      if: matrix.service.type == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      if: matrix.service.type == 'node'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service.path }}/package-lock.json
    
    - name: Set up Python
      if: matrix.service.type == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ${{ matrix.service.path }}/requirements.txt
    
    # Install linting tools
    - name: Install golangci-lint
      if: matrix.service.type == 'go'
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Install Python linting tools
      if: matrix.service.type == 'python'
      working-directory: ${{ matrix.service.path }}
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Install dependencies
    - name: Install dependencies
      working-directory: ${{ matrix.service.path }}
      run: |
        if [ "${{ matrix.service.type }}" = "java" ]; then
          mvn dependency:resolve
        elif [ "${{ matrix.service.type }}" = "go" ]; then
          go mod download
        elif [ "${{ matrix.service.type }}" = "node" ]; then
          npm ci
        fi
    
    # Run linting
    - name: Run linting for ${{ matrix.service.name }}
      working-directory: ${{ matrix.service.path }}
      run: ${{ matrix.service.lint_command }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test-summary:
    runs-on: ubuntu-latest
    needs: [test-services, lint-and-quality, security-scan]
    if: always()
    steps:
    - name: Test Summary
      run: |
        echo "## ðŸ§ª Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # This would need to be enhanced to show actual test results
        # For now, just show that the pipeline completed
        echo "| All Services | âœ… Tests completed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸŽ¯ **Optimization**: This pipeline now focuses only on testing and quality checks." >> $GITHUB_STEP_SUMMARY
        echo "ðŸ’° **Savings**: Removed expensive deployment steps to conserve GitHub Actions minutes." >> $GITHUB_STEP_SUMMARY